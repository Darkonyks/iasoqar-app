# Generated by Cascade: Backfill audit_day on AuditorReservation
from django.db import migrations


def backfill_audit_day(apps, schema_editor):
    AuditorReservation = apps.get_model('company', 'AuditorReservation')
    AuditDay = apps.get_model('company', 'AuditDay')

    # Only process reservations where audit_day is null
    reservations = AuditorReservation.objects.filter(audit_day__isnull=True)

    # Iterate and set audit_day by matching on (audit, date)
    for res in reservations.iterator():
        day = AuditDay.objects.filter(audit_id=res.audit_id, date=res.date).first()
        if day:
            # Use queryset.update to avoid triggering model save side-effects
            AuditorReservation.objects.filter(pk=res.pk).update(audit_day_id=day.pk)


def noop_reverse(apps, schema_editor):
    # No-op reverse; we don't want to unset audit_day
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('company', '0046_add_auditday_to_auditorreservation'),
    ]

    operations = [
        migrations.RunPython(backfill_audit_day, reverse_code=noop_reverse),
    ]
